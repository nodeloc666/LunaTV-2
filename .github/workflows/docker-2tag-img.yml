name: Build & Push Docker image

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker 镜像的版本标签 (例如: 1.2.3)'
        required: true
        # 将默认值改为空，以便更好地区分手动触发和自动触发
        default: ''
        type: string
  push:
    branches: [ main, master ]
  # pull_request 触发器通常不用于推送镜像，可以保留或移除
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            # 使用官方支持的 ARM runners
            os: ubuntu-latest
    runs-on: ${{ matrix.os }}

    steps:
      - name: Prepare platform name
        run: |
          echo "PLATFORM_NAME=${{ matrix.platform }}" | sed 's|/|-|g' >> $GITHUB_ENV

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository owner
        id: lowercase
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      # metadata-action 在此场景下主要用于生成 labels，简化 tags 部分
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.lowercase.outputs.owner }}/lunatv

      # build 任务只负责构建并按 digest 推送，不处理最终标签
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          # 关键：这里不再需要 tags 参数，因为我们按 digest 推送
          outputs: type=image,name-canonical=true,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Export 和 Upload 步骤保持不变
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          echo "Digest for ${{ matrix.platform }} is ${digest}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_NAME }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    # 只在 push 到主分支或手动触发时运行 merge 任务
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository owner
        id: lowercase
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      # --- [这是核心修改部分] ---
      - name: Prepare tags for manifest
        id: manifest_tags
        # bash -eo pipefail: 更安全的脚本执行模式
        run: |
          IMAGE_NAME="ghcr.io/${{ steps.lowercase.outputs.owner }}/lunatv"
          
          # 确定基础标签
          # 如果是手动触发 (workflow_dispatch) 并且用户输入了 tag，就用它
          # 否则 (例如 push 触发)，就默认为 'latest'
          BASE_TAG="${{ github.event.inputs.tag || 'latest' }}"
          echo "Base tag is: ${BASE_TAG}"
          
          # 开始构建标签参数列表
          TAG_ARGS="-t ${IMAGE_NAME}:${BASE_TAG}"
          
          # 如果基础标签不是 'latest'，就额外添加一个 'latest' 标签
          if [ "${BASE_TAG}" != "latest" ]; then
            echo "Adding 'latest' tag as well."
            TAG_ARGS="$TAG_ARGS -t ${IMAGE_NAME}:latest"
          fi
          
          # 将最终的参数字符串设置为输出
          echo "Final tag arguments: ${TAG_ARGS}"
          echo "tags=${TAG_ARGS}" >> $GITHUB_OUTPUT

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          # 检查是否有下载的 digest 文件
          if [ -z "$(ls -A .)" ]; then
            echo "No digests found to create manifest. Exiting."
            exit 1
          fi

          echo "Creating manifest with tags: ${{ steps.manifest_tags.outputs.tags }}"
          docker buildx imagetools create ${{ steps.manifest_tags.outputs.tags }} \
            $(printf 'ghcr.io/${{ steps.lowercase.outputs.owner }}/lunatv@sha256:%s ' *)

  cleanup-refresh:
    runs-on: ubuntu-latest
    needs:
      - merge
    if: always()
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 2
