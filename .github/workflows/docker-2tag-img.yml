name: advanced-docker Build & Push Docker image

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: '要构建的 Commit SHA (可选, 默认为最新代码)'
        required: false
        type: string
      version_tag:
        description: '版本号标签 (可选, 如 v1.0.0)'
        required: false
        type: string
      add_latest_tag:
        description: "是否标记为 'latest' 标签?"
        required: true
        type: boolean
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            os: ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}

    steps:
      - name: Prepare platform name
        run: |
          echo "PLATFORM_NAME=${{ matrix.platform }}" | sed 's|/|-|g' >> $GITHUB_ENV

      # --- 修改部分 1: 根据输入检出指定 commit ---
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          # 如果提供了 commit_sha, 则检出它; 否则检出触发工作流的分支的最新代码
          ref: ${{ github.event.inputs.commit_sha || github.ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository owner
        id: lowercase
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
      
      # --- 修改部分 2: 动态生成标签 ---
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.lowercase.outputs.owner }}/lunatv
          tags: |
            type=raw,value=latest,enable=${{ github.event.inputs.add_latest_tag }}
            type=raw,value=${{ github.event.inputs.version_tag }},enable=${{ github.event.inputs.version_tag != '' }}

      # --- 修改部分 3: 检查是否生成了任何标签 ---
      - name: Check for generated tags
        if: steps.meta.outputs.tags == ''
        run: |
          echo "::error::No tags were generated. You must provide a version tag and/or set 'add_latest_tag' to true."
          exit 1
          
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          outputs: type=image,name=ghcr.io/${{ steps.lowercase.outputs.owner }}/lunatv,name-canonical=true,push=true
          no-cache: true
          pull: true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_NAME }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repository owner
        id: lowercase
        run: echo "owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      # --- 修改部分 4: 在 merge job 中保持标签逻辑一致 ---
      - name: Extract metadata for merge
        id: meta_merge
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.lowercase.outputs.owner }}/lunatv
          tags: |
            type=raw,value=latest,enable=${{ github.event.inputs.add_latest_tag }}
            type=raw,value=${{ github.event.inputs.version_tag }},enable=${{ github.event.inputs.version_tag != '' }}
      
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          TAG_ARGS=$(echo "${{ steps.meta_merge.outputs.tags }}" | xargs -I {} printf -- "-t {} ")
          if [ -z "$TAG_ARGS" ]; then
            echo "::error::No tags were generated for the manifest list. This should not happen if the build jobs succeeded."
            exit 1
          fi
          
          docker buildx imagetools create ${TAG_ARGS} \
            $(printf 'ghcr.io/${{ steps.lowercase.outputs.owner }}/lunatv@sha256:%s ' *)

  cleanup-refresh:
    runs-on: ubuntu-latest
    needs:
      - merge
    if: always()
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 2
